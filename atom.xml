<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.liczhi.com</id>
    <title>李某的小栈</title>
    <updated>2021-09-12T05:24:29.208Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.liczhi.com"/>
    <link rel="self" href="https://www.liczhi.com/atom.xml"/>
    <subtitle>一只辣鸡李某的小破站</subtitle>
    <logo>https://www.liczhi.com/images/avatar.png</logo>
    <icon>https://www.liczhi.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 李某的小栈</rights>
    <entry>
        <title type="html"><![CDATA[浅谈手机通知推送]]></title>
        <id>https://www.liczhi.com/post/mobile-notification-push/</id>
        <link href="https://www.liczhi.com/post/mobile-notification-push/">
        </link>
        <updated>2020-10-04T13:07:07.000Z</updated>
        <summary type="html"><![CDATA[<p>本文转载自 <a href="https://blog.linioi.com">清絮的博客</a> ，原文链接：https://blog.linioi.com/posts/3/。本文发出时略有修改。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文转载自 <a href="https://blog.linioi.com">清絮的博客</a> ，原文链接：https://blog.linioi.com/posts/3/。本文发出时略有修改。</p>
<!-- more -->
<p>场景如下</p>
<blockquote>
<p>QQ/WeChat:<br>
A：我给你发消息你怎么半天没回？<br>
我：有事请 Telegram 联系，QQ/WeChat 随缘回复。<br>
A：这跟 QQ/WeChat 私聊有什么区别？为什么要这么麻烦？<br>
我：（此处省略 1000+ 字）</p>
</blockquote>
<p>忽然我意识到了，其实大部分人对自己的 IM 软件一无所知，那么一篇有必要的科普文章就应该开始动手了。Telegram 的优点当然不仅在于通知推送，但是我想从通知推送说起……</p>
<h2 id="声明">声明</h2>
<ul>
<li>限于篇幅，这篇文章并不会太多牵扯到手机通知推送的技术细节。（毕竟主要是科普嘛~~）</li>
<li>文章内容仅代表作者个人认知和观点，欢迎发表你的观点。</li>
<li>文章内容限于作者能力可能存在某些错误，欢迎指出。</li>
</ul>
<h2 id="ios-的通知推送">iOS 的通知推送</h2>
<p>说起手机推送，不得不先提的是 iOS 的通知推送。</p>
<p>即使你是一个数码小白，至少也听说过 iOS 通知的及时。<s>当然，你可能看到的是吐槽 Android 通知多么垃圾，这其实是反衬 iOS 通知的强大。</s></p>
<p>这里简单介绍一下 iOS 通知推送机制。</p>
<h3 id="本地推送">本地推送</h3>
<p>本地推送其实就是 App 的定时推送。App 注册本地推送通知，指定一个时间并在该时间推送通知。</p>
<h3 id="远程推送">远程推送</h3>
<blockquote>
<p>前提已满足条件：App 已注册远程推送通知。</p>
</blockquote>
<p>Apple 开发者文档给出的推送过程示意图如下：<br>
<img src="https://z3.ax1x.com/2021/09/12/4pVIER.png" alt="" loading="lazy"></p>
<p>用文字描述过程如下：</p>
<blockquote>
<p>软件需要推送通知<br>
软件服务器将通知推送到 Apple Push Notification service（APNs）<br>
Apple Push Notification service（APNs） 将通知转发给用户。</p>
</blockquote>
<p>可以看到，这全过程都是由 Apple Push Notification service（APNs）完成通知的接收与发送，并且最后的通知推送也是由系统进行统一推送。这一过程中，设备上的软件<strong>本身没有参与</strong>。</p>
<p>也就是说，<strong>iOS 通知推送并不需要软件的后台运行</strong>。完全由 Apple Push Notification service（APNs）和 系统 完成通知推送的方式实现了最大化的通知效率。别羡慕了，羡慕就去买台果子吧。</p>
<h2 id="android-的通知推送">Android 的通知推送</h2>
<p>这里首先为被风评被害多年的 404 小厂的操作系统辩解一番。人家一个官网都常年打不开的小公司，怎么可能实现像 Apple Push Notification service 这样大体量的通知推送服务。（雾）</p>
<p>如你所见，由于某些众所周知的原因，Android 的系统推送通知一直处于一个尴尬的情况~~ (指国内) ~~。于是在长期以来的 Android 发展中，各大公司群策群力，纷纷贡献自己的金点子银点子，携手解决这一难题。</p>
<h3 id="google-的-fcm">Google 的 FCM</h3>
<p>严格意义上来说，某 404 公司对于自己操作系统的推送服务还是有进行一番 <s>无意义的挣扎</s> 努力。</p>
<blockquote>
<p>2010 年，在 Apple 推送通知服务发布后，Android 2.2 也马上推出了「云端至设备消息传递（Cloud to Device Messaging」，即 C2DM。<br>
2012 年 404 小厂推出「Google 云消息传递（Google Cloud Messaging）」，即 GCM。GCM 取代了 C2DM 并实现了更好的功耗表现，且对于开发者更加友好。<br>
2014 年某 404 小厂收购 Firebase 后，将 GCM 改名为「Firebase 云消息传递（Firebase Cloud Messaging）」，即 FCM。FCM 较之 GCM 则更进一步简化了推送服务相关的开发工作。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://z3.ax1x.com/2021/09/12/4pZMGV.png" alt="" loading="lazy"></figure>
<p>从原理上来看，FCM 和 APNs 一致，也是按照 <code>软件服务器</code> ==&gt; <code>FCM 服务器</code> ==&gt; <code>用户</code> 这一流程实现的。</p>
<p>也就是说，对于 Android 系统 FCM 推送，整个推送过程中的 通知的接收与发送 都由 FCM 完成。这一过程中，设备上的软件<strong>本身没有参与</strong>。</p>
<p>虽然可能和你以前想象的不太一样，但是事实如此：<strong>Android 系统同样有一套较为完善的推送机制，这个推送机制绿色高效，实现原理类似于 Apple</strong>。</p>
<p>不过想法是美好的，现实是残酷的。因为种种原因，FCM 在国内并不能正常使用，主要原因如下：</p>
<blockquote>
<p>FCM 依赖 Google Play Service 而绝大部分国内 Android 手机都阉割了 Google Play Service。<br>
大部分国内 App 都没有注册 FCM（不支持 FCM）。<br>
FCM 在国内的连接不稳定。</p>
</blockquote>
<p>对于已安装 Google Play Service 的用户，可以在手机拨号盘输入 <code>*#*#426#*#*</code>  查看你当前的 FCM 连接状态。</p>
<figure data-type="image" tabindex="2"><img src="https://z3.ax1x.com/2021/09/12/4pZ6Zd.png" alt="" loading="lazy"></figure>
<h3 id="各大互联网公司的解决方案">各大互联网公司的解决方案</h3>
<p>由上面的叙述我们可以知道，404 小厂的 FCM 是靠不住了，关键时刻还是需要我们自力更生，自给自足。</p>
<p>事实上，这种小问题根本难不倒我们大天朝的互联网公司，以阿里巴巴等互联网巨头为首率先想出一种行之有效的解决方法——<strong>团结就是力量</strong>。</p>
<p>可能上一段你看得有点懵，但不要紧，我给这种解决方法换一个更广为人知的名字你就熟了——<strong>链式启动</strong>。</p>
<p>互联网公司通过自己的软件全家桶或和其他互联网公司相互合作，以<strong>相互唤醒</strong>的方式保证自己全家人后台存活，然后团结一致完成通知推送（当然也可能顺便干一点别的东西）。</p>
<p>简单来说，如果这些软件中有一个不慎倒下了（后台被杀死），<strong>其他软件会迅速将其拉起</strong>，保证其在后台<strong>始终处于唤醒状态</strong>，让共用的推送通道保持活跃而不被系统杀死，以便消息能及时送达。</p>
<p>这一方法简单粗暴，不仅体现了化繁为简这一哲学思想，更是弘扬了社会主义团结互助的精神，再次告诉我们什么叫做团结就是力量！（此处应有掌声）</p>
<p>当然，这种方法还是有一点点小小的弊端，那就是手机耗电有点快，可能还会有点烫有点卡。<s>但是瑕不掩瑜，这点小问题和这天才般的创意比起来算什么呢？</s></p>
<h3 id="手机厂商的推送服务">手机厂商的推送服务</h3>
<p>面对 <s>群魔乱舞的</s> Android 推送问题，终究还是有手机厂商站了出来，模仿 Apple 和 404 小厂的做法建立了他们自己的推送服务，比如小米的「MiPush」。</p>
<p>这些推送服务被集成在各厂商高度定制的 Android 系统中，作为系统级推送存在。手机厂商试图通过模仿 Apple 和 404 小厂实现同等程度的通知绿色与时效性。</p>
<p>但想法是美好的，事实上，开发者不可能兼顾所有的厂商，为每个品牌的手机都适配对应的推送服务，能专门适配其中一家到两家已经是很良心了 <s>(试图为某鹅狡辩)</s> 。除此之外，虽然手机厂商的推送服务也可以在其它品牌的手机上正常使用，但并不能像在自家定制系统上一样实现系统级的推送，推送服务依旧需要后台常驻。</p>
<h3 id="也许是黎明的曙光统一推送联盟">也许是黎明的曙光——统一推送联盟</h3>
<p>不知道你有没有听说过 <a href="https://green-android.org/">Android 绿色应用公约</a>。如果没有听说过也没关系，现在你知道了。</p>
<blockquote>
<p><strong>宗旨</strong></p>
<p>这是一项旨在推动 Android 生态中的优秀应用共同维护一个更加良性的『设备体验』而发起的开放公约。</p>
<p>…</p>
<p><strong>核心原则</strong></p>
<p>完全遵照 Android 本身的演进方向（包括 <a href="https://developer.android.google.cn/preview/behavior-changes.html">Android O 所引入的新变化</a>），积极引导和协助应用开发团队平滑完成对接 Android 最新变化的节奏，在确保应用核心功能不受影响的前提下，减少不必要的应用后台行为，并以更加高效、节能的调度机制改善后台行为的调度。</p>
<p>公约的必要规约中，只纳入可被明确验证的条款，不接受需要主观裁量或定义模糊的条款（例如涉及交互设计的内容）。</p>
<p>所有约束条款均给出推荐的最佳实践或具有可操作性的调整方法。</p>
<p>涉及到功能与设备体验之间的潜在冲突时，遵循最终选择权给予用户的原则。</p>
<p>——《Android 绿色应用公约 4.0》</p>
</blockquote>
<p><s>虽然在我看来公约里的部分 App 也不怎么绿色。</s></p>
<p>我们可以看到，在 Android 绿色应用公约中的互联网大公司的软件屈指可数。<s>（好吧，别自欺欺人了，是基本上没有，有的也不咋绿色）</s></p>
<p>这说明了，仅仅靠各公司的自觉或社区推动实现国内 Android 生态 App 绿色化是不现实的，而通知这个关键点更是每个公司都不愿意松手。</p>
<p>这时候，需要有更强大的力量站出来，整顿当前国内 App 的通知推送乱象。于是，<a href="http://m.chinaupa.com/">统一推送联盟</a>出现了。</p>
<blockquote>
<p>统一推送联盟成立于2017年10月，挂靠单位是电信终端产业协会（TAF），接受工业和信息化部业务指导，住所设在北京。联盟核心任务是：探索推送行业创新，促进终端生产厂商、应用开发厂商和第三方服务提供商等进行深入合作，整合行业资源，助推形成统一的推送体系，创造绿色环境，减少与终端用户的利益冲突，提升整体行业形象，降低整体行业的实现成本，形成自律基础上的产业链协同发展，实现产业的共同繁荣。</p>
<p>统一推送联盟是在自愿、平等、互利、合作的基础上，由国内外消息推送产业相关的企、事业单位、社团组织、高等院校、科研院所等自愿结成的跨行业、开放性、非营利性的社会组织。本联盟旨在促进相关主体之间的交流和深度合作，促进供需对接和知识共享，形成优势互补，有效推进消息推送产业的发展，切实解决产业现实问题。</p>
<p>——统一推送联盟《关于我们》</p>
</blockquote>
<p>事实证明统一推送联盟是实现了巨大的影响的。</p>
<p>不到两年时间里，统一推送联盟就实现了由「全民讨论统一推送后 Android 美好的幸福生活」到「全民讨论 统一推送联盟 到底黄没黄」的巨大转变。</p>
<p>但是，我们要客观、发展性地看待问题，统一推送联盟一直在时刻努力着，2020年发表了一篇名为 <a href="https://mp.weixin.qq.com/s/JJ_cd3kHiggqb8pNqAOQkA">《【科普】统一推送能给手机带来什么？》</a> 的科普性文章。文章底部留言中，官方更是回复「推必达将于近期上线」。</p>
<p>今年（2021年）的8月底，统一推送联盟发表了一篇名为<a href="https://mp.weixin.qq.com/s?__biz=MzUyODQzNDgxMw==&amp;mid=2247484330&amp;idx=1&amp;sn=b024be8bcd18e73f1dccfa0ab520cdb1&amp;chksm=fa7110b8cd0699ae7e41333a5d77c829789d41e73523bfa5eeed714e12f2124201713b4bb451&amp;scene=132#wechat_redirect">《统一推送能力开放平台正式上线，开发者招募启动》</a>的文章，<s>我也不知道我有生之年能不能等到这天了。</s></p>
<h2 id="题外话让我们回头看看-qqwechat">题外话：让我们回头看看 QQ/WeChat</h2>
<p>看到这里，你大概对手机系统推送有了比较全面的了解。</p>
<p>那么你一定好奇，国民级软件 QQ 和 WeChat 是怎么实现手机通知推送的。</p>
<p>iOS 当然没有任何疑问，通过 Apple Push Notification service。</p>
<p>Android 上则一言难尽，QQ注册了华为推送和一半的Heytap，微信的FCM则取决于你和Google推送服务器的连通性。</p>
<p>没有注册推送服务意味着 QQ 和 WeChat 在 Android 上实现通知推送<strong>全靠后台常驻</strong>。微信尤甚，<strong>某个进程挂了，整个 App 都收不到通知</strong>。</p>
<p>保证 QQ 和 WeChat 的通知时效性一直是困扰大部分开发者和所有国内手机厂商的难题。对此大部份国内手机厂商的解决方法都是对 QQ 和 WeChat 后台无限制以最大程度保活，实现通知推送正常。</p>
<p>而此时，Telegram 支持 FCM 的优点就体现出来了——对于我来说，我能第一时间收到你发给我的消息并回复，而 QQ 和 WeChat 还得等上一阵子。我希望私聊我的人用 Telegram 而不是 QQ 和 WeChat 的原因很简单：</p>
<blockquote>
<p>我不想浪费我的时间在无意义的事情上，比如保证 QQ 和 WeChat 能及时收到消息。</p>
</blockquote>
<p>如果你用某一品牌的手机，QQ 和 WeChat 经常收不到消息，请不要咒骂这个手机厂商。如果可以的话，请劝告你身边的人也不要这样做。手机厂商也在尽自己最大的努力，只不过他们只能尽人事听天命。</p>
<hr>
<p>参考链接： 太多了，有缘再整理吧…</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何完成在微信对公交卡的充值和线下圈存]]></title>
        <id>https://www.liczhi.com/post/how-to-recharge-bus-card-online/</id>
        <link href="https://www.liczhi.com/post/how-to-recharge-bus-card-online/">
        </link>
        <updated>2020-08-28T04:31:31.000Z</updated>
        <summary type="html"><![CDATA[<p>其实合川区的公交卡早就可以线上充值线下圈存了，但貌似很多同志不知道到底如何操作，故写此文。</p>
]]></summary>
        <content type="html"><![CDATA[<p>其实合川区的公交卡早就可以线上充值线下圈存了，但貌似很多同志不知道到底如何操作，故写此文。</p>
<!--more-->
<p>在合川，可以线上充值公交卡早已不是件新鲜事；最早可追溯到的报道是2019年4月24日今日合川网的<a href="http://www.jrhcw.com/html/2019-04/24/content_50420631.htm">合川这20个公交站可充值IC卡 你学会了吗？</a></p>
<p>在报道中提到的可圈存公交站有以下几个：</p>
<blockquote>
<p>北城有瑞山路站、合州医院站、合川中学站、移通学院站、义乌小商品市场站、嘉陵路站、党校站、蟠龙花园站、杨柳街站、鹿角栅站、交通街站；南城有区政府站、南景豪爵站、南屏路站、合阳中学站、中什字站、中医院站、安太花园站、金鹿花园站。预计还会在城区铺设更多的圈存设备，目前还在进一步的规划中。</p>
</blockquote>
<p>公交站台上已有较为详细的教程，此文章将更详细的说明。</p>
<p>下面我就来详细介绍一下如何充值、圈存。</p>
<p>首先，打开微信，点击首页右上角放大镜图标。</p>
<figure data-type="image" tabindex="1"><img src="https://z3.ax1x.com/2021/09/12/4piEDI.png" alt="微信首页图" loading="lazy"></figure>
<p>点击后，选择搜索指定内容-公众号</p>
<figure data-type="image" tabindex="2"><img src="https://z3.ax1x.com/2021/09/12/4pilvj.png" alt="搜索指定内容" loading="lazy"></figure>
<p>输入 <code>交运通</code> 三字，轻点键盘回车键。</p>
<figure data-type="image" tabindex="3"><img src="https://z3.ax1x.com/2021/09/12/4pFCd0.png" alt="交运通" loading="lazy"></figure>
<p>结果第一个便是啦~</p>
<blockquote>
<p>现在服务号已经更名为 交运通卡 啦</p>
</blockquote>
<p>新版微信可直接点击下方的在线充值，老版本微信请轻点卡片，进入公众号主页后点击在线充值，再点最上方的选项。</p>
<figure data-type="image" tabindex="4"><img src="https://z3.ax1x.com/2021/09/12/4pFFiT.png" alt="公众号主页-在线充值" loading="lazy"></figure>
<p>首次进入，需绑定IC卡，输入公交卡正面右上角数字与下方的验证码即可。</p>
<p>绑定完成后，大概是这样的(因为我是学生，所以是学生卡啦；卡号为什么这么多0？我也不知道~)</p>
<figure data-type="image" tabindex="5"><img src="https://z3.ax1x.com/2021/09/12/4pFlFK.png" alt="绑定完成截图" loading="lazy"></figure>
<p>点击您要充值的卡片右边的&quot;在线充值&quot;按钮，即可进入在线充值页面。</p>
<figure data-type="image" tabindex="6"><img src="https://z3.ax1x.com/2021/09/12/4pFmLR.png" alt="在线充值" loading="lazy"></figure>
<p>进入此页面后，会显示您的卡类别、卡号与卡内余额（余额显示并非实时，但基本上是准确的）。</p>
<p>点选金额（或输入任意整数金额（可为1，但…拿来学生卡救急不错））后，点击下方的<code>立即支付</code>按钮，按照正常微信支付流程进行即可~</p>
<p>支付完成后，资金会进入待圈存状态，您可点击充值页面的 最近支付记录 查看近期圈存成功的线上充值订单。</p>
<figure data-type="image" tabindex="7"><img src="https://z3.ax1x.com/2021/09/12/4pFKdx.png" alt="最近支付记录" loading="lazy"></figure>
<p>您需前往文章开头提到的任意一个公交站（一般位于站牌正面最右方）进行圈存，充值流程才算结束。（行外人说一个自己对圈存的理解：如果不圈存，卡内是充值前的金额，云端是充值后的金额，直接刷卡会报错（吧？），所以需要圈存将充值金额写入公交卡才和云端数据相吻合。也许5G普及后的某天，可以实现刷卡时同时写入云端金额。</p>
<figure data-type="image" tabindex="8"><img src="https://z3.ax1x.com/2021/09/12/4pFJQH.png" alt="END" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[整理一下Typecho的一些函数]]></title>
        <id>https://www.liczhi.com/post/typecho-functions/</id>
        <link href="https://www.liczhi.com/post/typecho-functions/">
        </link>
        <updated>2020-08-19T16:53:06.000Z</updated>
        <summary type="html"><![CDATA[<p>网上收集的一些Typecho函数，希望在需要时能用得上~</p>
]]></summary>
        <content type="html"><![CDATA[<p>网上收集的一些Typecho函数，希望在需要时能用得上~</p>
<!--more-->
<p>站点名称</p>
<pre><code class="language-php">&lt;?php $this-&gt;options-&gt;title() ?&gt;
</code></pre>
<p>站点网址</p>
<pre><code class="language-php">&lt;?php $this-&gt;options -&gt;siteUrl(); ?&gt;
</code></pre>
<p>标题</p>
<pre><code class="language-php">&lt;?php $this -&gt;options-&gt;title(); ?&gt;
</code></pre>
<p>站点说明</p>
<pre><code class="language-php">&lt;?php $this-&gt;options-&gt;description() ?&gt;
</code></pre>
<p>模板文件的文件夹地址</p>
<pre><code class="language-php">&lt;?php $this-&gt;options-&gt;themeUrl(); ?&gt;
</code></pre>
<p>文章或页面的作者</p>
<pre><code class="language-php">&lt;?php $this-&gt;author(); ?&gt;
</code></pre>
<p>作者头像</p>
<pre><code class="language-php">&lt;?php $this-&gt;author-&gt;gravatar('640') ?&gt;
</code></pre>
<p>此处640是图片的边长，输出的是一个图片</p>
<p>该文章作者的全部文章列表链接</p>
<pre><code class="language-php">&lt;?php $this-&gt;author-&gt;permalink (); ?&gt;
</code></pre>
<p>该文作者个人主页链接</p>
<pre><code class="language-php">&lt;?php $this-&gt;author-&gt;url(); ?&gt;
</code></pre>
<p>该文作者的邮箱地址</p>
<pre><code class="language-php">&lt;?php $this-&gt;author-&gt;mail(); ?&gt;
</code></pre>
<p>上一篇、下一篇</p>
<pre><code class="language-php">&lt;?php $this-&gt;thePrev(); ?&gt; &lt;?php $this-&gt;theNext(); ?&gt;
</code></pre>
<p>判断是否是首页，输出相关内容(可用性存疑)</p>
<pre><code class="language-php">&lt;?php if ($this-&gt;is('index')): ?&gt;
//首页输出内容
&lt;?php else: ?&gt;
//不是首页输出内容
&lt;?php endif; ?&gt;
</code></pre>
<p>文章或页面评论数目</p>
<pre><code class="language-php">&lt;?php $this-&gt;commentsNum('这里空空如也', '仅有一条评论' , '%d 条评论'); ?&gt;
</code></pre>
<p>截取部分文章（大部分用于首页每篇文章显示摘要），350是字数</p>
<pre><code class="language-php">&lt;?php $this-&gt;excerpt(350, '.. .'); ?&gt;
</code></pre>
<p>调用自定义字段</p>
<pre><code class="language-php">&lt;?php $this-&gt;fields-&gt;自定义字段名 ?&gt;
</code></pre>
<p>站点RSS地址</p>
<pre><code class="language-php">&lt;?php $this-&gt;options-&gt;feedUrl(); ?&gt;
</code></pre>
<p>获取最新文章</p>
<pre><code class="language-php">&lt;?php $this-&gt;widget('Widget_Contents_Post_Recent', 'pageSize=8&amp;type=category')-&gt;parse('&lt;li&gt;&lt;a href=&quot;{permalink}&quot;&gt;{title}&lt;/a&gt;&lt;/li&gt;'); ?&gt;
</code></pre>
<p>纯文字分类名称，不带链接</p>
<pre><code class="language-php">&lt;?php $this-&gt;category(',', false); ?&gt;
</code></pre>
<p>获取文章分类列表</p>
<pre><code class="language-php">&lt;ul&gt;
&lt;?php $this-&gt;widget('Widget_Metas_Category_List')
                -&gt;parse('&lt;li&gt;&lt;a href=&quot;{permalink}&quot;&gt;{name}&lt;/a&gt; ({count})&lt;/li&gt;'); ?&gt;
&lt;/ul&gt;
</code></pre>
<p>获取某分类的文章</p>
<pre><code class="language-php">&lt;ul&gt;
&lt;?php 
$this-&gt;widget('Widget_Archive@indexyc', 'pageSize=8&amp;type=category', 'mid=1')
-&gt;parse('&lt;li&gt;&lt;a href=&quot;{permalink}&quot; title=&quot;{title}&quot;&gt;{title}&lt;/a&gt;&lt;/li&gt;'); ?&gt;
&lt;/ul&gt;
</code></pre>
<p>获取最新评论列表</p>
<pre><code class="language-php">&lt;ul&gt;
    &lt;?php $this-&gt;widget('Widget_Comments_Recent')-&gt;to($comments); ?&gt;
    &lt;?php while($comments-&gt;next()): ?&gt;
        &lt;li&gt;&lt;a href=&quot;&lt;?php $comments-&gt;permalink(); ?&gt;&quot;&gt;&lt;?php $comments-&gt;author(false); ?&gt;&lt;/a&gt;: &lt;?php $comments-&gt;excerpt(50, '...'); ?&gt;&lt;/li&gt;
    &lt;?php endwhile; ?&gt;
&lt;/ul&gt;
</code></pre>
<p>获取最新文章</p>
<pre><code class="language-php">&lt;?php while ($this-&gt;next()): ?&gt;
&lt;?php if ($this-&gt;sequence &lt;= 3): ?&gt;
html
&lt;?php endif; ?&gt;
&lt;?php endwhile; ?&gt;
</code></pre>
<p>获取最新访客评论</p>
<pre><code class="language-php">&lt;?php $this-&gt;widget('Widget_Comments_Recent','ignoreAuthor=true')-&gt;to($comments); ?&gt;
    &lt;?php while($comments-&gt;next()): ?&gt;
    &lt;li&gt;&lt;a href=&quot;&lt;?php $comments-&gt;permalink(); ?&gt;&quot;&gt;&lt;?php $comments-&gt;author(false); ?&gt;&lt;/a&gt;: &lt;?php $comments-&gt;excerpt(50, '...'); ?&gt;&lt;/li&gt;
&lt;?php endwhile; ?&gt;
</code></pre>
<p>获取文章时间归档</p>
<pre><code class="language-php">&lt;ul&gt;
    &lt;?php $this-&gt;widget('Widget_Contents_Post_Date', 'type=month&amp;format=F Y')
                -&gt;parse('&lt;li&gt;&lt;a href=&quot;{permalink}&quot;&gt;{date}&lt;/a&gt;&lt;/li&gt;'); ?&gt;
&lt;/ul&gt;
</code></pre>
<p>获取标签云</p>
<pre><code class="language-php">&lt;?php $this-&gt;widget('Widget_Metas_Tag_Cloud', 'ignoreZeroCount=1&amp;limit=28')-&gt;to($tags); ?&gt;
&lt;?php while($tags-&gt;next()): ?&gt;
&lt;a href=&quot;&lt;?php $tags-&gt;permalink(); ?&gt;&quot; class=&quot;size-&lt;?php $tags-&gt;split(5, 10, 20, 30); ?&gt;&quot;&gt;&lt;?php $tags-&gt;name(); ?&gt;&lt;/a&gt;
&lt;?php endwhile; ?&gt;
</code></pre>
<p>调用该文相关文章列表</p>
<pre><code class="language-php">&lt;?php $this-&gt;related(5)-&gt;to($relatedPosts); ?&gt;
    &lt;?php if ($relatedPosts-&gt;have()): ?&gt;    //这句也可以写成 if (count($relatedPosts-&gt;stack))
    &lt;?php while ($relatedPosts-&gt;next()): ?&gt;
        &lt;li&gt;&lt;a href=&quot;&lt;?php $relatedPosts-&gt;permalink(); ?&gt;&quot; title=&quot;&lt;?php $relatedPosts-&gt;title(); ?&gt;&quot;&gt;&lt;?php $relatedPosts-&gt;title(); ?&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;?php endwhile; ?&gt;
    &lt;?php else : ?&gt;
        &lt;li&gt;无相关文章&lt;/li&gt;
    &lt;?php endif; ?&gt;
</code></pre>
<p>隐藏HEAD内的程序版本和模板名称</p>
<pre><code class="language-php">&lt;?php $this-&gt;header(&quot;generator=&amp;template=&quot;); ?&gt;
</code></pre>
<p>获取读者墙</p>
<pre><code class="language-php">&lt;?php
$period = time() - 999592000; // 時段: 30 天, 單位: 秒
$counts = Typecho_Db::get()-&gt;fetchAll(Typecho_Db::get()
-&gt;select('COUNT(author) AS cnt','author', 'url', 'mail')
-&gt;from('table.comments')
-&gt;where('created &gt; ?', $period )
-&gt;where('status = ?', 'approved')
-&gt;where('type = ?', 'comment')
-&gt;where('authorId = ?', '0')
-&gt;group('author')
-&gt;order('cnt', Typecho_Db::SORT_DESC)
-&gt;limit(25)
);
$mostactive = '';
$avatar_path = 'http://www.gravatar.com/avatar/';
foreach ($counts as $count) {
  $avatar = $avatar_path . md5(strtolower($count['mail'])) . '.jpg';
  $c_url = $count['url']; if ( !$c_url ) $c_url = Helper::options()-&gt;siteUrl;
  $mostactive .= &quot;&lt;a href='&quot; . $c_url . &quot;' title='&quot; . $count['author'] . &quot; (参与&quot; . $count['cnt'] . &quot;次互动)' target='_blank'&gt;&lt;img src='&quot; . $avatar . &quot;' alt='&quot; . $count['author'] . &quot;的头像' class='avatar' width='32' height='32' /&gt;&lt;/a&gt;\n&quot;;
}
echo $mostactive; ?&gt;
</code></pre>
<p>登录与游客显示不同内容</p>
<pre><code class="language-php">&lt;?php if($this-&gt;user-&gt;hasLogin()): ?&gt;
登录可见
&lt;?php else: ?&gt;
游客与登录均可见
&lt;?php endif; ?&gt;
</code></pre>
<p>部分内容来源：<a href="https://developer.aliyun.com/article/44707">云栖社区</a>,版权归原作者所有,若有侵权请联系删除。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新的开始]]></title>
        <id>https://www.liczhi.com/post/restart/</id>
        <link href="https://www.liczhi.com/post/restart/">
        </link>
        <updated>2020-08-19T16:46:22.000Z</updated>
        <content type="html"><![CDATA[<p>由于莫得钱钱续费服务器加之freenom的免费域名出现问题，十二博客曾经离线过一段时间。</p>
<p>搭上了腾讯云域名活动的便车注册了<code>SHIERTX.COM</code>并买了咖啡OVH一个月勉强维持新博客的运行，不过老数据已经一去不复返啦~</p>
<p>新的站点，新的开始，嘿嘿:)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://www.liczhi.com/post/hello-gridea/</id>
        <link href="https://www.liczhi.com/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>